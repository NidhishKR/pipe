AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Tag:
    Type: String
    Description: Tag of the Docker Image.
    Default: latest
  ECSClusterName:
    Type: String
    Description: Name of an existing ECS Cluster.
    Default: demo
  PublicSubnetAZ1:
    Description: Public Subnet ID in Availability Zone 1.
    Type: String
    Default: subnet-715a6d38
  PublicSubnetAZ2:
    Description: Public Subnet ID in Availability Zone 2.
    Type: String
    Default: subnet-ae4935f5
  VpcId:
    Type: String
    Description: Provide the VPC ID.
    Default: vpc-eac54b8c
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      #The Family name will be used along with ECS_CLUSTER_NAME to prepare the stack name. It should be of Format abb-cdd-sd
      Family: IMS-Ad-cicd
      ContainerDefinitions:
      - Name: mongo
        Cpu: '256'
        Essential: 'true'
        Image: mongo
        Memory: '128'
        # LogConfiguration:
        #   LogDriver: awslogs
        #   Options:
        #     # awslogs-group: !Ref 'CloudwatchLogsGroup'
        #     awslogs-region: !Ref 'AWS::Region'
        #     awslogs-stream-prefix: mongo
        PortMappings:
        - ContainerPort: 27017
          HostPort: 0
      - Name: IMS_Ad
        Cpu: '10'
        Essential: 'true'
        Image: 145725228555.dkr.ecr.us-east-1.amazonaws.com/demo:latest
          # "Fn::Sub":
            # - '145725228555.dkr.ecr.us-east-1.amazonaws.com/demo:8ecdcbb'
            # - { AccountId: { "Ref" : "AWS::AccountId" }, Region: { "Ref" : "AWS::Region" }}
        Memory: '128'
        Links: ["mongo"]
        PortMappings:
        - ContainerPort: 4000
          HostPort: 0
      Volumes:
      - Name: my-vol
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: IMS-Ad-ALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - Ref:  PublicSubnetAZ1
        - Ref:  PublicSubnetAZ2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ECSTG
      LoadBalancerArn:
        Ref: ALB
      Port: '80'
      Protocol: HTTP
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: ECSTG
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn:
        Ref: ALBListener
      Priority: 1
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VpcId
  ECSServicePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ecs-service"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ['*']
            Resource: '*'
      Roles:
      - Ref: ECSServiceRole
  Service:
    Type: AWS::ECS::Service
    DependsOn: ECSServicePolicy
    Properties:
      Cluster: demo
      DesiredCount: '1'
      TaskDefinition:
        Ref: TaskDefinition
      LoadBalancers:
      - ContainerName: IMS_Ad
        ContainerPort: '4000'
        TargetGroupArn:
          Ref: ECSTG
      Role:
        Ref: ECSServiceRole
  API:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "IMS-Ad-API"
  APIStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: "Staging"
      RestApiId:
        Ref: "API"
      DeploymentId:
        Ref: "APIDeployment"
      MethodSettings:
        -
          ResourcePath: "/"
          HttpMethod: "GET"
          MetricsEnabled: "true"
          DataTraceEnabled: "true"
  APIDeployment:
    DependsOn: Method
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        Ref: "API"
      StageName: "Prod"
  Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "API"
      ParentId:
        Fn::GetAtt:
          - "API"
          - "RootResourceId"
      PathPart: "api"
  Method:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "API"
      ResourceId:
        Fn::GetAtt:
          - "API"
          - "RootResourceId"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration:
        Type: "HTTP"
        IntegrationHttpMethod: "GET"
        Uri: !Join ['', ["http://", !GetAtt ALB.DNSName]]
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
Outputs:
  ecsservice:
    Value:
      Ref: Service
